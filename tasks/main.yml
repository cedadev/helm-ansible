---

- name: Ensure unpack destination exists
  file:
    path: /opt/helm/{{ helm_release }}
    state: directory

- name: Fetch Helm archive
  get_url:
    url: "{{ helm_archive_url }}"
    checksum: "{{ helm_archive_checksum }}"
    dest: "/opt/helm/{{ helm_archive_name }}"

- name: Unpack Helm archive
  unarchive:
    remote_src: yes
    src: "/opt/helm/{{ helm_archive_name }}"
    dest: "/opt/helm/{{ helm_release }}"

- name: Create latest symlink
  file:
    path: /opt/helm/latest
    src: /opt/helm/{{ helm_release }}
    state: link

- name: Create symlink in /usr/local/bin
  file:
    path: /usr/local/bin/helm
    src: /opt/helm/latest/linux-amd64/helm
    state: link

# See https://helm.sh/docs/using_helm/#securing-your-helm-installation for advice
# on securing a Helm installation

- name: Create service account for tiller
  command: kubectl -n kube-system create serviceaccount tiller
  register: tiller_service_account
  changed_when: tiller_service_account.rc == 0
  failed_when: >
    tiller_service_account.rc != 0 and
    'AlreadyExists' not in tiller_service_account.stderr

- name: Bind tiller service account to cluster-admin role
  command: >
    kubectl create clusterrolebinding tiller-cluster-admin
      --clusterrole=cluster-admin
      --serviceaccount=kube-system:tiller
  register: tiller_role_binding
  changed_when: tiller_role_binding.rc == 0
  failed_when: >
    tiller_role_binding.rc != 0 and
    'AlreadyExists' not in tiller_role_binding.stderr

- name: Create Helm TLS directory
  file:
    path: /etc/helm/tls
    state: directory

- name: Generate CA for Helm
  command: >
    openssl req -new -nodes -x509 -days 3650 -extensions v3_ca
      -subj {{ helm_tls_ca_subject | quote }}
      -keyout /etc/helm/tls/ca.key
      -out /etc/helm/tls/ca.crt
  args:
    creates: /etc/helm/tls/ca.crt

- name: Create CSRs for Helm tiller and client
  command: >
    openssl req -nodes -newkey rsa:4096
      -subj {{ item.subject | quote }}
      -keyout /etc/helm/tls/{{ item.name }}.key
      -out /etc/helm/tls/{{ item.name }}.csr
  args:
    creates: /etc/helm/tls/{{ item.name }}.csr
  loop:
    - name: server
      subject: "{{ helm_tls_server_subject }}"
    - name: client
      subject: "{{ helm_tls_client_subject }}"

- name: Sign certificates for Helm tiller and client
  command: >
    openssl x509 -req -days 3650 -CAcreateserial
      -CA /etc/helm/tls/ca.crt
      -CAkey /etc/helm/tls/ca.key
      -in /etc/helm/tls/{{ item }}.csr
      -out /etc/helm/tls/{{ item }}.crt
  args:
    creates: /etc/helm/tls/{{ item }}.crt
  loop:
    - server
    - client

- name: Initialise tiller
  command: >
    helm init --upgrade
      --service-account tiller
      --override 'spec.template.spec.containers[0].command'='{/tiller,--storage=secret}'
      --tiller-tls
      --tiller-tls-cert /etc/helm/tls/server.crt
      --tiller-tls-key /etc/helm/tls/server.key
      --tiller-tls-verify
      --tls-ca-cert /etc/helm/tls/ca.crt

- name: Ensure tiller has started
  shell: kubectl -n kube-system rollout status deployment tiller-deploy
